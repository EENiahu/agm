@mixin bg-img-center {
	background-size: cover;
	background-repeat: no-repeat;
	background-position: center;
}

@mixin img-style {
	width: 100%;
	height: 100%;
	object-fit: cover;
}

@mixin absolute-center {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin absolute-left-center {
	content: '';
	position: absolute;
	top: 50%;
	left: 0;
	transform: translateY(-50%);
}

@mixin absolute-center-center {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

//flex

@mixin flex-center {
	display: flex;
	justify-content: center;
	align-items: center;
}
@mixin flex-between-start {
	display: flex;
	justify-content: space-between;
	align-items: flex-start;
}
@mixin flex-between-center {
	display: flex;
	justify-content: space-between;
	align-items: center;
}
@mixin flex-between-end {
	display: flex;
	justify-content: space-between;
	align-items: flex-end;
}
@mixin flex-around-center {
	display: flex;
	justify-content: space-around;
	align-items: center;
}
@mixin flex-column-start {
	display: flex;
	flex-direction: column;
	align-items: flex-start;
}
@mixin flex-column-center {
	display: flex;
	flex-direction: column;
	align-items: center;
}
@mixin flex-column-end {
	display: flex;
	flex-direction: column;
	align-items: flex-end;
}

@mixin flex-column-reverse-start {
	display: flex;
	flex-direction: column-reverse;
	align-items: flex-start;
}
@mixin flex-column-reverse-center {
	display: flex;
	flex-direction: column-reverse;
	align-items: center;
}

//animations
//text underline
@mixin underline-in-out($selector, $lineColor: #000) {
	&:hover {
		#{$selector}::before {
			left: 100%;
		}
	}

	#{$selector} {
		position: relative;
        padding-bottom: 2px;
		line-height: 1.2;
	}

	#{$selector}::before {
		content: '';
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 2px;
		background: $lineColor;
		opacity: 1;
		transition: .25s;
	}
}

@mixin underline-out-in($selector, $lineColor: #000) {
	&:hover {
		#{$selector}::before {
			left: 0;
		}
	}

	#{$selector} {
		position: relative;
        padding-bottom: 2px;
		line-height: 1.2;
	}

	#{$selector}::before {
		content: '';
		position: absolute;
		bottom: 0;
		left: 100%;
		width: 100%;
		height: 2px;
		background: $lineColor;
		opacity: 1;
		transition: .25s;
	}
}

//Responsive

@mixin respond-to($name) {
	// If the key exists in the map
	@if map-has-key($breakpoints, $name) {
		// Prints a media query based on the value
		@media only screen and #{inspect(map-get($breakpoints, $name))} {
			@content;
		}
	}
		// If the key doesn't exist in the map
	@else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
	}
}

@mixin respond-from-to($from, $to){
	@media only screen and (min-width: $from) and (max-width: $to)  {
		@content;
	}
}

@mixin respond-min($min){
	@media only screen and (min-width: $min) {
		@content;
	}
}

@mixin respond-max($max){
	@media only screen and (max-width: $max) {
		@content;
	}
}
